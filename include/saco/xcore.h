#pragma once

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#if defined(_MSC_VER)
#define SACO_NOINLINE __declspec(noinline)
#define SACO_ALWAYS_INLINE __forceinline
#elif defined(__GNUC__)
#define SACO_NOINLINE __attribute__((noinline))
#define SACO_ALWAYS_INLINE __attribute__((always_inline)) inline
#else
#define SACO_NOINLINE
#define SACO_ALWAYS_INLINE inline
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#if defined(__GNUC__) || defined(__clang__)
#define SACO_LIKELY(expr) (__builtin_expect((expr) != 0, 1))
#define SACO_UNLIKELY(expr) (__builtin_expect((expr) != 0, 0))
#else
#define SACO_LIKELY(expr) ((expr) != 0)
#define SACO_UNLIKELY(expr) ((expr) != 0)
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#if !defined(SACO_ASSERT) // allow unit tests to override
#define SACO_ASSERT assert
#endif

#if !defined(SACO_ASSERT_MSG) // allow unit tests to override
#define SACO_ASSERT_MSG(exp, msg) assert((exp) && msg)
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#if defined(__cpp_if_constexpr)
#define SACO_IF_CONSTEXPR constexpr
#else
#define SACO_IF_CONSTEXPR
#endif

#define SACO_IF_CONSTRUCT_CONTEXT(...) SACO_IF_CONSTEXPR(__VA_ARGS__::is_construct_context)

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <cassert>
#include <cstddef>
#include <cstdint>

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace saco {

#if defined(__cpp_lib_byte)
using byte = std::byte;
#else
using byte = unsigned char;
#endif

} // namespace saco

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace saco::detail {

static constexpr unsigned MAX_NEW_ALIGNMENT = __STDCPP_DEFAULT_NEW_ALIGNMENT__;

}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
